{
  "patterns": [
    {
      "id": "realtime-dashboard",
      "title": "Real-time Analytics Dashboard",
      "description": "WebSocket integration for live data updates",
      "category": "Dashboard",
      "difficulty": "advanced",
      "concepts": ["WebSockets", "Real-time updates", "Data visualization"],
      "react": {
        "code": "// React Real-time Dashboard\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Line } from 'react-chartjs-2';\n\nfunction RealtimeDashboard() {\n  const [metrics, setMetrics] = useState({\n    users: 0,\n    revenue: 0,\n    orders: 0,\n    avgOrderValue: 0\n  });\n  \n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: 'Users Online',\n      data: [],\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1\n    }]\n  });\n  \n  const ws = useRef(null);\n  \n  useEffect(() => {\n    // Connect to WebSocket\n    ws.current = new WebSocket('wss://api.example.com/metrics');\n    \n    ws.current.onopen = () => {\n      console.log('Connected to metrics stream');\n    };\n    \n    ws.current.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      \n      // Update metrics\n      setMetrics(data.metrics);\n      \n      // Update chart data\n      setChartData(prev => {\n        const newLabels = [...prev.labels, new Date().toLocaleTimeString()];\n        const newData = [...prev.datasets[0].data, data.metrics.users];\n        \n        // Keep only last 20 points\n        if (newLabels.length > 20) {\n          newLabels.shift();\n          newData.shift();\n        }\n        \n        return {\n          labels: newLabels,\n          datasets: [{\n            ...prev.datasets[0],\n            data: newData\n          }]\n        };\n      });\n    };\n    \n    ws.current.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n    \n    // Cleanup\n    return () => {\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, []);\n  \n  return (\n    <div className=\"dashboard\">\n      <h1>Real-time Analytics</h1>\n      \n      <div className=\"metrics-grid\">\n        <MetricCard\n          title=\"Active Users\"\n          value={metrics.users}\n          change=\"+12%\"\n          icon=\"ðŸ‘¥\"\n        />\n        <MetricCard\n          title=\"Revenue\"\n          value={`$${metrics.revenue.toLocaleString()}`}\n          change=\"+8%\"\n          icon=\"ðŸ’°\"\n        />\n        <MetricCard\n          title=\"Orders\"\n          value={metrics.orders}\n          change=\"+15%\"\n          icon=\"ðŸ“¦\"\n        />\n        <MetricCard\n          title=\"Avg Order Value\"\n          value={`$${metrics.avgOrderValue}`}\n          change=\"-3%\"\n          icon=\"ðŸ“Š\"\n        />\n      </div>\n      \n      <div className=\"chart-container\">\n        <h2>Users Online</h2>\n        <Line \n          data={chartData}\n          options={{\n            responsive: true,\n            animation: {\n              duration: 0\n            },\n            scales: {\n              y: {\n                beginAtZero: true\n              }\n            }\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction MetricCard({ title, value, change, icon }) {\n  const isPositive = change.startsWith('+');\n  \n  return (\n    <div className=\"metric-card\">\n      <div className=\"metric-header\">\n        <span className=\"metric-icon\">{icon}</span>\n        <span className={`metric-change ${isPositive ? 'positive' : 'negative'}`}>\n          {change}\n        </span>\n      </div>\n      <h3 className=\"metric-value\">{value}</h3>\n      <p className=\"metric-title\">{title}</p>\n    </div>\n  );\n}",
        "usage": "// Using the dashboard\nfunction App() {\n  return (\n    <div className=\"app\">\n      <RealtimeDashboard />\n    </div>\n  );\n}\n\n// CSS for styling\n.metrics-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 1rem;\n  margin-bottom: 2rem;\n}\n\n.metric-card {\n  background: white;\n  padding: 1.5rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}"
      },
      "vue": {
        "code": "// Vue Real-time Dashboard\n<template>\n  <div class=\"dashboard\">\n    <h1>Real-time Analytics</h1>\n    \n    <div class=\"metrics-grid\">\n      <MetricCard\n        title=\"Active Users\"\n        :value=\"metrics.users\"\n        change=\"+12%\"\n        icon=\"ðŸ‘¥\"\n      />\n      <MetricCard\n        title=\"Revenue\"\n        :value=\"`$${metrics.revenue.toLocaleString()}`\"\n        change=\"+8%\"\n        icon=\"ðŸ’°\"\n      />\n      <MetricCard\n        title=\"Orders\"\n        :value=\"metrics.orders\"\n        change=\"+15%\"\n        icon=\"ðŸ“¦\"\n      />\n      <MetricCard\n        title=\"Avg Order Value\"\n        :value=\"`$${metrics.avgOrderValue}`\"\n        change=\"-3%\"\n        icon=\"ðŸ“Š\"\n      />\n    </div>\n    \n    <div class=\"chart-container\">\n      <h2>Users Online</h2>\n      <Line \n        :data=\"chartData\"\n        :options=\"chartOptions\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted, onUnmounted } from 'vue'\nimport { Line } from 'vue-chartjs'\nimport { Chart, registerables } from 'chart.js'\nimport MetricCard from './MetricCard.vue'\n\nChart.register(...registerables)\n\nconst metrics = reactive({\n  users: 0,\n  revenue: 0,\n  orders: 0,\n  avgOrderValue: 0\n})\n\nconst chartData = reactive({\n  labels: [],\n  datasets: [{\n    label: 'Users Online',\n    data: [],\n    borderColor: 'rgb(75, 192, 192)',\n    tension: 0.1\n  }]\n})\n\nconst chartOptions = {\n  responsive: true,\n  animation: {\n    duration: 0\n  },\n  scales: {\n    y: {\n      beginAtZero: true\n    }\n  }\n}\n\nlet ws = null\n\nconst connectWebSocket = () => {\n  ws = new WebSocket('wss://api.example.com/metrics')\n  \n  ws.onopen = () => {\n    console.log('Connected to metrics stream')\n  }\n  \n  ws.onmessage = (event) => {\n    const data = JSON.parse(event.data)\n    \n    // Update metrics\n    Object.assign(metrics, data.metrics)\n    \n    // Update chart data\n    chartData.labels.push(new Date().toLocaleTimeString())\n    chartData.datasets[0].data.push(data.metrics.users)\n    \n    // Keep only last 20 points\n    if (chartData.labels.length > 20) {\n      chartData.labels.shift()\n      chartData.datasets[0].data.shift()\n    }\n  }\n  \n  ws.onerror = (error) => {\n    console.error('WebSocket error:', error)\n  }\n}\n\nonMounted(() => {\n  connectWebSocket()\n})\n\nonUnmounted(() => {\n  if (ws) {\n    ws.close()\n  }\n})\n</script>\n\n<!-- MetricCard.vue -->\n<template>\n  <div class=\"metric-card\">\n    <div class=\"metric-header\">\n      <span class=\"metric-icon\">{{ icon }}</span>\n      <span :class=\"['metric-change', changeClass]\">\n        {{ change }}\n      </span>\n    </div>\n    <h3 class=\"metric-value\">{{ value }}</h3>\n    <p class=\"metric-title\">{{ title }}</p>\n  </div>\n</template>\n\n<script setup>\nimport { computed } from 'vue'\n\nconst props = defineProps({\n  title: String,\n  value: [String, Number],\n  change: String,\n  icon: String\n})\n\nconst changeClass = computed(() => \n  props.change.startsWith('+') ? 'positive' : 'negative'\n)\n</script>",
        "usage": "<!-- Using in App.vue -->\n<template>\n  <div class=\"app\">\n    <RealtimeDashboard />\n  </div>\n</template>\n\n<script setup>\nimport RealtimeDashboard from './components/RealtimeDashboard.vue'\n</script>\n\n<style>\n.metrics-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 1rem;\n  margin-bottom: 2rem;\n}\n\n.metric-card {\n  background: white;\n  padding: 1.5rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n</style>"
      },
      "keyDifferences": [
        "Vue's reactive objects automatically trigger updates",
        "React requires setState for updates",
        "Vue's lifecycle hooks are more explicit",
        "React hooks provide more flexibility for complex scenarios"
      ]
    },
    {
      "id": "data-table-virtual",
      "title": "Virtual Scrolling Data Table",
      "description": "Performant table for large datasets",
      "category": "Dashboard",
      "difficulty": "advanced",
      "concepts": ["Virtual scrolling", "Performance", "Large datasets"],
      "react": {
        "code": "// React Virtual Data Table\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { FixedSizeList as List } from 'react-window';\n\nfunction VirtualDataTable({ data, columns }) {\n  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'asc' });\n  const [filters, setFilters] = useState({});\n  const [selectedRows, setSelectedRows] = useState(new Set());\n  \n  // Apply filters and sorting\n  const processedData = useMemo(() => {\n    let filtered = data;\n    \n    // Apply filters\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value) {\n        filtered = filtered.filter(row => \n          String(row[key]).toLowerCase().includes(value.toLowerCase())\n        );\n      }\n    });\n    \n    // Apply sorting\n    if (sortConfig.key) {\n      filtered = [...filtered].sort((a, b) => {\n        const aVal = a[sortConfig.key];\n        const bVal = b[sortConfig.key];\n        \n        if (aVal < bVal) return sortConfig.direction === 'asc' ? -1 : 1;\n        if (aVal > bVal) return sortConfig.direction === 'asc' ? 1 : -1;\n        return 0;\n      });\n    }\n    \n    return filtered;\n  }, [data, filters, sortConfig]);\n  \n  const handleSort = useCallback((key) => {\n    setSortConfig(prev => ({\n      key,\n      direction: prev.key === key && prev.direction === 'asc' ? 'desc' : 'asc'\n    }));\n  }, []);\n  \n  const handleFilter = useCallback((key, value) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  }, []);\n  \n  const toggleRowSelection = useCallback((id) => {\n    setSelectedRows(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(id)) {\n        newSet.delete(id);\n      } else {\n        newSet.add(id);\n      }\n      return newSet;\n    });\n  }, []);\n  \n  const Row = ({ index, style }) => {\n    const row = processedData[index];\n    const isSelected = selectedRows.has(row.id);\n    \n    return (\n      <div \n        style={style} \n        className={`table-row ${isSelected ? 'selected' : ''}`}\n      >\n        <div className=\"table-cell checkbox-cell\">\n          <input\n            type=\"checkbox\"\n            checked={isSelected}\n            onChange={() => toggleRowSelection(row.id)}\n          />\n        </div>\n        {columns.map(column => (\n          <div key={column.key} className=\"table-cell\">\n            {column.render ? column.render(row[column.key], row) : row[column.key]}\n          </div>\n        ))}\n      </div>\n    );\n  };\n  \n  return (\n    <div className=\"virtual-table\">\n      <div className=\"table-header\">\n        <div className=\"table-row\">\n          <div className=\"table-cell checkbox-cell\">\n            <input\n              type=\"checkbox\"\n              onChange={(e) => {\n                if (e.target.checked) {\n                  setSelectedRows(new Set(processedData.map(row => row.id)));\n                } else {\n                  setSelectedRows(new Set());\n                }\n              }}\n            />\n          </div>\n          {columns.map(column => (\n            <div key={column.key} className=\"table-cell header-cell\">\n              <button \n                className=\"sort-button\"\n                onClick={() => handleSort(column.key)}\n              >\n                {column.title}\n                {sortConfig.key === column.key && (\n                  <span className=\"sort-indicator\">\n                    {sortConfig.direction === 'asc' ? ' â†‘' : ' â†“'}\n                  </span>\n                )}\n              </button>\n              {column.filterable && (\n                <input\n                  type=\"text\"\n                  className=\"filter-input\"\n                  placeholder=\"Filter...\"\n                  onChange={(e) => handleFilter(column.key, e.target.value)}\n                />\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      <List\n        height={600}\n        itemCount={processedData.length}\n        itemSize={50}\n        width=\"100%\"\n      >\n        {Row}\n      </List>\n      \n      <div className=\"table-footer\">\n        <span>{selectedRows.size} of {processedData.length} selected</span>\n      </div>\n    </div>\n  );\n}",
        "usage": "// Using the virtual table\nfunction App() {\n  const data = Array.from({ length: 10000 }, (_, i) => ({\n    id: i + 1,\n    name: `User ${i + 1}`,\n    email: `user${i + 1}@example.com`,\n    status: i % 3 === 0 ? 'Active' : 'Inactive',\n    revenue: Math.floor(Math.random() * 10000)\n  }));\n  \n  const columns = [\n    { key: 'id', title: 'ID', filterable: true },\n    { key: 'name', title: 'Name', filterable: true },\n    { key: 'email', title: 'Email', filterable: true },\n    { \n      key: 'status', \n      title: 'Status', \n      filterable: true,\n      render: (value) => (\n        <span className={`status ${value.toLowerCase()}`}>\n          {value}\n        </span>\n      )\n    },\n    { \n      key: 'revenue', \n      title: 'Revenue', \n      render: (value) => `$${value.toLocaleString()}`\n    }\n  ];\n  \n  return <VirtualDataTable data={data} columns={columns} />;\n}"
      },
      "vue": {
        "code": "// Vue Virtual Data Table\n<template>\n  <div class=\"virtual-table\">\n    <div class=\"table-header\">\n      <div class=\"table-row\">\n        <div class=\"table-cell checkbox-cell\">\n          <input\n            type=\"checkbox\"\n            :checked=\"isAllSelected\"\n            @change=\"toggleAllSelection\"\n          >\n        </div>\n        <div\n          v-for=\"column in columns\"\n          :key=\"column.key\"\n          class=\"table-cell header-cell\"\n        >\n          <button \n            class=\"sort-button\"\n            @click=\"handleSort(column.key)\"\n          >\n            {{ column.title }}\n            <span v-if=\"sortConfig.key === column.key\" class=\"sort-indicator\">\n              {{ sortConfig.direction === 'asc' ? ' â†‘' : ' â†“' }}\n            </span>\n          </button>\n          <input\n            v-if=\"column.filterable\"\n            type=\"text\"\n            class=\"filter-input\"\n            placeholder=\"Filter...\"\n            @input=\"handleFilter(column.key, $event.target.value)\"\n          >\n        </div>\n      </div>\n    </div>\n    \n    <RecycleScroller\n      class=\"scroller\"\n      :items=\"processedData\"\n      :item-size=\"50\"\n      key-field=\"id\"\n      v-slot=\"{ item }\"\n    >\n      <div :class=\"['table-row', { selected: selectedRows.has(item.id) }]\">\n        <div class=\"table-cell checkbox-cell\">\n          <input\n            type=\"checkbox\"\n            :checked=\"selectedRows.has(item.id)\"\n            @change=\"toggleRowSelection(item.id)\"\n          >\n        </div>\n        <div\n          v-for=\"column in columns\"\n          :key=\"column.key\"\n          class=\"table-cell\"\n        >\n          <component\n            v-if=\"column.component\"\n            :is=\"column.component\"\n            :value=\"item[column.key]\"\n            :row=\"item\"\n          />\n          <span v-else>\n            {{ column.format ? column.format(item[column.key]) : item[column.key] }}\n          </span>\n        </div>\n      </div>\n    </RecycleScroller>\n    \n    <div class=\"table-footer\">\n      <span>{{ selectedRows.size }} of {{ processedData.length }} selected</span>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, reactive } from 'vue'\nimport { RecycleScroller } from 'vue-virtual-scroller'\nimport 'vue-virtual-scroller/dist/vue-virtual-scroller.css'\n\nconst props = defineProps({\n  data: Array,\n  columns: Array\n})\n\nconst sortConfig = reactive({ key: null, direction: 'asc' })\nconst filters = reactive({})\nconst selectedRows = ref(new Set())\n\nconst processedData = computed(() => {\n  let result = props.data\n  \n  // Apply filters\n  Object.entries(filters).forEach(([key, value]) => {\n    if (value) {\n      result = result.filter(row => \n        String(row[key]).toLowerCase().includes(value.toLowerCase())\n      )\n    }\n  })\n  \n  // Apply sorting\n  if (sortConfig.key) {\n    result = [...result].sort((a, b) => {\n      const aVal = a[sortConfig.key]\n      const bVal = b[sortConfig.key]\n      \n      if (aVal < bVal) return sortConfig.direction === 'asc' ? -1 : 1\n      if (aVal > bVal) return sortConfig.direction === 'asc' ? 1 : -1\n      return 0\n    })\n  }\n  \n  return result\n})\n\nconst isAllSelected = computed(() => \n  processedData.value.length > 0 && \n  processedData.value.every(row => selectedRows.value.has(row.id))\n)\n\nconst handleSort = (key) => {\n  if (sortConfig.key === key) {\n    sortConfig.direction = sortConfig.direction === 'asc' ? 'desc' : 'asc'\n  } else {\n    sortConfig.key = key\n    sortConfig.direction = 'asc'\n  }\n}\n\nconst handleFilter = (key, value) => {\n  filters[key] = value\n}\n\nconst toggleRowSelection = (id) => {\n  const newSet = new Set(selectedRows.value)\n  if (newSet.has(id)) {\n    newSet.delete(id)\n  } else {\n    newSet.add(id)\n  }\n  selectedRows.value = newSet\n}\n\nconst toggleAllSelection = (event) => {\n  if (event.target.checked) {\n    selectedRows.value = new Set(processedData.value.map(row => row.id))\n  } else {\n    selectedRows.value = new Set()\n  }\n}\n</script>",
        "usage": "<!-- Using the virtual table -->\n<template>\n  <VirtualDataTable :data=\"data\" :columns=\"columns\" />\n</template>\n\n<script setup>\nimport { ref } from 'vue'\nimport VirtualDataTable from './VirtualDataTable.vue'\n\nconst data = Array.from({ length: 10000 }, (_, i) => ({\n  id: i + 1,\n  name: `User ${i + 1}`,\n  email: `user${i + 1}@example.com`,\n  status: i % 3 === 0 ? 'Active' : 'Inactive',\n  revenue: Math.floor(Math.random() * 10000)\n}))\n\nconst columns = [\n  { key: 'id', title: 'ID', filterable: true },\n  { key: 'name', title: 'Name', filterable: true },\n  { key: 'email', title: 'Email', filterable: true },\n  { \n    key: 'status', \n    title: 'Status', \n    filterable: true,\n    component: defineAsyncComponent(() => import('./StatusBadge.vue'))\n  },\n  { \n    key: 'revenue', \n    title: 'Revenue', \n    format: (value) => `$${value.toLocaleString()}`\n  }\n]\n</script>"
      },
      "keyDifferences": [
        "Vue's virtual scroller has better Vue integration",
        "React window is more mature and battle-tested",
        "Vue's reactive system simplifies state updates",
        "React's approach is more explicit but flexible"
      ]
    }
  ]
}